#include <vector>
#include <iostream>
#include <fstream>
#include <algorithm>
#include <TString.h>
#include <map>
#include <TH1.h>
#include <TH2.h>
#include <TFile.h>
#include <TCanvas.h>
#include <TF1.h>
#include <TLegend.h>
#include <TLatex.h>
#include <TAxis.h>
#include <TStyle.h>
#include <TProfile.h>
#include <TPad.h>
#include <THnSparse.h>
#include <TStyle.h>
#include <TStyle.h>
#include "untuplizer.h"
#include <TClonesArray.h>
#include <TLorentzVector.h>
#include "setNCUStyle.C"
 
using namespace std;
void roc_curve(std::string inputFile) {
  
  //get TTree from file ...
  TreeReader data(inputFile.data());

  //TH1F* h_leaddoubleSV=new TH1F("","",20,-1,1);
  //TH1F* h_subldoubleSV=new TH1F("","",20,-1,1);
  //TH1F* h_leadfat = new TH1F("","",44,500,1600);
  //TH1F* h_leadadd = new TH1F("","",44,500,1600);
  //TH1F* h_sublfat = new TH1F("","",44,500,1600);
  //TH1F* h_subladd = new TH1F("","",44,500,1600);
  //TH1F* h_diff1 = new TH1F("","",44,0,1600);
  TH2F *h2_doubleSV   = new TH2F("","",20,-1,1,20,-1,1);
  TH2F *h2_fatjetCSV = new TH2F("","",20,0,1,20,0,1);

  const int nDim=4;
  int nbins[nDim]={10,10,10,10};
  double xmin[nDim]={0,0,0,0};
  double xmax[nDim]={1,1,1,1};
  THnSparseD* hs = new THnSparseD("hs", "hs", nDim, nbins, xmin, xmax);

  Long64_t DENOM = 0;
  Long64_t DBTnum[21] = {0};
  Long64_t FATnum[21] = {0};
  Long64_t SUBnum[21] = {0};

  Long64_t nExact4[10]={0};
  Long64_t nExact3[10]={0};
  Long64_t nExact2[10]={0};

  //Event loop
  for(Long64_t jEntry=0; jEntry<data.GetEntriesFast() ;jEntry++){
    
    if (jEntry % 50000 == 0)
      fprintf(stderr, "Processing event %lli of %lli\n", jEntry + 1, data.GetEntriesFast());
    
    data.GetEntry(jEntry);
    
    int nFATJet         = data.GetInt("FATnJet");
    const int nFJets=nFATJet;
    TClonesArray* fatjetP4 = (TClonesArray*) data.GetPtrTObject("FATjetP4");
    Float_t*  fatjetCSV    = data.GetPtrFloat("FATjetCSV");
    Float_t*  fatjetCISVV2 = data.GetPtrFloat("FATjetCISVV2");
    Float_t*  fatjetPRmass = data.GetPtrFloat("FATjetPRmass");
    vector<bool>    &passFatJetLooseID = *((vector<bool>*) data.GetPtr("FATjetPassIDLoose"));
    Float_t*  fatjetPRmassL2L3Corr = data.GetPtrFloat("FATjetPRmassL2L3Corr");
    Int_t*   FATnSubSDJet   = data.GetPtrInt("FATnSubSDJet");
    vector<float>* FATsubjetSDCSV       = data.GetPtrVectorFloat("FATsubjetSDCSV", nFATJet);
    
    int nADDJet         = data.GetInt("ADDnJet");
    const int nAJets=nADDJet;
    TClonesArray* addjetP4 = (TClonesArray*) data.GetPtrTObject("ADDjetP4");
    Float_t*  addjet_doubleSV = data.GetPtrFloat("ADDjet_DoubleSV");
    
    vector<int> fatjet;
    vector<pair<int,int>> Mjj;
    for(int ij=0; ij<nFJets; ij++) {
      TLorentzVector* thisJet = (TLorentzVector*)fatjetP4->At(ij);
      //if(thisJet->Pt()<200)continue;
      if(thisJet->Pt()<750)continue;
      if(fabs(thisJet->Eta())>2.4)continue;
      if(!passFatJetLooseID[ij])continue;
      //if(fatjetPRmassL2L3Corr[ij]<105 || fatjetPRmassL2L3Corr[ij]>135)continue;
      if(fatjetPRmassL2L3Corr[ij]<70 || fatjetPRmassL2L3Corr[ij]>200)continue;
      //if(fatjetCSV[ij]<0.605)continue;
      //if( FATnSubSDJet[ij] != 2 ) continue;
      //if( FATsubjetSDCSV[ij][0] < 0.605 || FATsubjetSDCSV[ij][1] < 0.605 ) continue;  
      
      fatjet.push_back(ij);	
    }
    
    if(fatjet.size()<2)continue;
    
    for(unsigned int i=0; i<fatjet.size(); i++) {
      for(unsigned int j=0; j<i; j++) {
	int index_that = fatjet[i];
	int index_those = fatjet[j];
	TLorentzVector* thatJet  = (TLorentzVector*)fatjetP4->At(index_that);
	TLorentzVector* thoseJet = (TLorentzVector*)fatjetP4->At(index_those);
	float dEta = fabs(thatJet->Eta() - thoseJet->Eta());
	if(dEta>1.3)continue;
	
	Double_t mjj = (*thatJet+*thoseJet).M();
	if(mjj<1000)continue; 
	Mjj.push_back(make_pair(index_that,index_those));

      }
    }
    
    if(Mjj.size()<1)continue;   

    int aa = Mjj[0].second;
    int ee = Mjj[0].first;
    TLorentzVector* Jet1 = (TLorentzVector*)fatjetP4->At(aa); 
    TLorentzVector* Jet2 = (TLorentzVector*)fatjetP4->At(ee);
    h2_fatjetCSV->Fill(fatjetCISVV2[aa],fatjetCISVV2[ee]);
   
    int addJetIndex[2]={-1,-1}; 
    for(int ad=0; ad<nAJets; ad++) {
      TLorentzVector* Jet3 = (TLorentzVector*)addjetP4->At(ad);
      if(Jet1->DeltaR(*Jet3)<0.1 && addJetIndex[0] < 0) { addJetIndex[0]=ad;} // first add jet to pass the delta r cut
      if(Jet2->DeltaR(*Jet3)<0.1 && addJetIndex[1] < 0) { addJetIndex[1]=ad;} // first add jet to pass the delta r cut
    }
    if(addJetIndex[0]<0 || addJetIndex[1]<0)continue;
    h2_doubleSV->Fill(addjet_doubleSV[ addJetIndex[0]], addjet_doubleSV[addJetIndex[1]]);

    Long64_t nSubJetPass[10]={0};

    int fatjetIndex[2]={Mjj[0].second, Mjj[0].first};
    double subjetCSV[4]={-1,-1,-1,-1};

    //---------------per jet counting-----------------\
    
    Long64_t nDBTPass[21] = {0};
    Long64_t nFATPass[21] = {0};
    DENOM += 2;

    Float_t add = -1;
    Float_t fat = 0;
    for(int i=0;i<21;i++) {
     for(int j=0;j<2;j++) {
       int ajet = addJetIndex[j];
       int fjet = fatjetIndex[j];
        if(addjet_doubleSV[ajet]>add)nDBTPass[i]++;
	if(fatjetCISVV2[fjet]>fat)nFATPass[i]++;
     }
    
    DBTnum[i] += nDBTPass[i];
    FATnum[i] += nFATPass[i];
    add += 0.1;
    fat += 0.05;
    }

    Long64_t nSUB1Pass[21] = {0};
    Long64_t nSUB2Pass[21] = {0};

    Float_t sub = 0;
    int fjet1 = fatjetIndex[0];
    int fjet2 = fatjetIndex[1];
    for(int i=0;i<21;i++) {
      for(int sub1=0;sub1<FATnSubSDJet[fjet1];sub1++) {
	if(FATsubjetSDCSV[fjet1][sub1]>sub)nSUB1Pass[i]++;
      }
      for(int sub2=0;sub2<FATnSubSDJet[fjet2];sub2++) {
	if(FATsubjetSDCSV[fjet2][sub2]>sub)nSUB2Pass[i]++;
      }

      if(nSUB1Pass[i] == 1) nSUB1Pass[i] = 0;
      if(nSUB2Pass[i] == 1) nSUB2Pass[i] = 0;
      SUBnum[i] += (nSUB1Pass[i]/2) + (nSUB2Pass[i]/2);
      sub +=0.05;
    }
 
    //------------------------------------------------

    Float_t n = 0;
    for(int q=0;q<10;q++) {  
      for(int i=0; i<2; i++)
	{
	  int ijet = fatjetIndex[i];
	  for(int isub=0; isub < FATnSubSDJet[ijet]; isub++)
	    {
	      int vectorID = i*2 + isub;
	      subjetCSV[vectorID]=    FATsubjetSDCSV[ijet][isub];
	      if(FATsubjetSDCSV[ijet][isub]>n)nSubJetPass[q]++;
	      
	    }
	}
      hs->Fill(subjetCSV);
      if(nSubJetPass[q]==2) nExact2[q]++;
      if(nSubJetPass[q]==3) nExact3[q]++;
      if(nSubJetPass[q]==4) nExact4[q]++;
      n += 0.1;
    }

  } //end of the event loop

  std::cout << "Denominator= "<< DENOM << std::endl;
  std::cout << "DBT Generated Events= " << h2_doubleSV->Integral(1,20,1,20) << std::endl;
  for(int i=0;i<21;i++) {
    std::cout <<  DBTnum[i] << std::endl;
  }

  std::cout << "FAT Generated Events= " << h2_fatjetCSV->Integral(1,20,1,20) << std::endl;
  for(int i=0;i<21;i++) {
    std::cout <<  FATnum[i] << std::endl;
  }

  std::cout << "SUB Generated Events= " << hs->GetEntries() << std::endl;
  for(int i=0;i<21;i++) {
    std::cout <<  SUBnum[i] << std::endl;
  }
  

  /*
  TFile* outfile = new TFile("SignalEff.root","recreate");    
  h2_doubleSV->Write("doublebtagging");
  h2_fatjetCSV->Write("fatjetcsv");
  hs->Write("subjetcsv");
  outfile->Write();
  */
  /*
  ofstream fout;
  fout.open("subjet.dat");
  //fout << nExact4 << " " << nExact3 << " " << nExact2 << endl;
  //fout.close();

  for(int q=0;q<10;q++){
   std::cout << nExact4[q] << " " << nExact3[q] << " " << nExact2[q] << std::endl; 
   fout << nExact4[q] << " " << nExact3[q] << " " << nExact2[q] << endl;  
  }
  fout.close();

  //Long64_t ncutsig[10]= {0};
  */ 
 
  /*
  for(int q=0;q<10;q++)
    for(int i=q+1;i<=10; i++)
      for(int j=q+1; j<=10; j++)
        for(int k=q+1; k<=10; k++)
          for(int m=q+1; m<=10; m++) {
            int index[nDim]={i,j,k,m};
            ncutsig[q] += hs->GetBinContent(index);
	  }
  // std::cout << "Events exactly 4 signal"<< q << " = " << ncutsig[q] << std::endl;
  // }
  */
 
  /*
  setNCUStyle();
  TStyle *gStyle;
  gStyle->SetPalette(55);
  
  TCanvas* f = new TCanvas("f","",0,0,600,600);
  f->cd();
  h2_doubleSV->Draw("colz");
    
  TCanvas* f1 = new TCanvas("f1","",0,0,600,600);
  f1->cd();
  h2_fatjetCSV->Draw("colz");
  
  TCanvas* f2 = new TCanvas("f2","",0,0,600,600);
  f2->cd();
  h2_subjetCSV->Draw("colz");
  */
  
  /*
  TCanvas* q = new TCanvas("q","",0,0,600,600); 
  q->cd();
  TH1D *h1 = (TH1D*) h_leadfat->Clone();
  TH1D *h2 = (TH1D*) h_leadadd->Clone();
  h2->Add(h1,-1);
  TH1D *ratio1 = new TH1D(" ", "",44,500,1600);
  ratio1->Divide(h2,h_leadfat);
  ratio1->Draw();
  TLegend *legends = new TLegend(0.18,0.66,0.38,0.87);     
  legends->SetFillStyle(0);                                                                                                    
  legends->SetHeader("#frac{ADDJet p_{T} - Lead FATJet p_{T}}{Lead FATJet p_{T}}");
  legends->Draw();

  TCanvas* f = new TCanvas("f","",0,0,600,600);
  f->cd();
  TH1D *h3 = (TH1D*) h_sublfat->Clone();
  TH1D *h4 = (TH1D*) h_subladd->Clone();
  h4->Add(h3,-1);
  TH1D *ratio11 = new TH1D(" ", "",44,500,1600);
  ratio11->Divide(h4,h_sublfat);
  ratio11->Draw();
  TLegend *legendss = new TLegend(0.18,0.66,0.48,0.87);
  legendss->SetFillStyle(0);
  legendss->SetHeader("#frac{ADDJet p_{T} - Sub-lead FATJet p_{T}}{Sub-lead FATJet p_{T}}");
  legendss->Draw();
  */

  /*
  TCanvas* c = new TCanvas("c","",0,0,600,600);
  c->cd();
  Double_t scale1 = 1/h_leadfat->Integral();
  h_leadfat->Scale(scale1);
  h_leadfat->Draw();
  h_leadfat->SetLineColor(kBlue-6);
  h_leadfat->SetFillColor(kBlue-6);
  h_leadfat->GetXaxis()->SetTitle("p_{T} [GeV]");
  h_leadfat->SetLineWidth(2);
  Double_t scale2 = 1/h_leadadd->Integral();
  h_leadadd->Scale(scale2);
  h_leadadd->Draw("same");
  h_leadadd->SetLineColor(kBlue+3);
  h_leadadd->SetFillStyle(3007);
  h_leadadd->SetFillColor(kBlue+3);
  h_leadadd->SetLineWidth(2);

  TLegend *alegend = new TLegend(0.52,0.55,0.92,0.67);
  //TLegend *alegend = new TLegend(0.49,0.51,1,0.67);
  alegend->SetFillStyle(0);
  alegend->SetHeader("p_{T} > 170 GeV");
  //alegend->SetHeader("#DeltaR(Lead FATJet, ADDJet) < 0.1");
  alegend->AddEntry(h_leadfat,"Leading FATJet", "f");
  alegend->AddEntry(h_leadadd,"ADDJet", "f");
  alegend->Draw();

  std::cout << "FATJet =" << 1/scale1 << std::endl;
  std::cout << "ADDJet =" << 1/scale2 << std::endl;
  //std::cout << "2 addjet =" <<after<< std::endl;
  */   

  /* 
  TCanvas* w = new TCanvas("w","",0,0,600,600);
  w->cd();
  //Double_t norm1 = 1/h_sublfat->Integral();
  //h_sublfat->Scale(norm1);
  h_sublfat->Draw();
  h_sublfat->SetLineColor(kRed-6);
  h_sublfat->SetFillColor(kRed-6);
  h_sublfat->GetXaxis()->SetTitle("p_{T} [GeV]");
  h_sublfat->SetLineWidth(2);
  //Double_t norm2 = 1/h_subladd->Integral();
  //h_subladd->Scale(norm2);
  h_subladd->Draw("same");
  h_subladd->SetLineColor(kRed+3);
  h_subladd->SetFillStyle(3007);
  h_subladd->SetFillColor(kRed+3);
  h_subladd->SetLineWidth(2);

  TLegend *legend = new TLegend(0.49,0.51,1,0.67);
  legend->SetFillStyle(0);
  legend->SetHeader("#DeltaR(Sub-lead FATJet, ADDJet) < 0.1");
  legend->AddEntry(h_sublfat,"Sub-leading FATJet", "f");
  legend->AddEntry(h_subladd,"ADDJet", "f");
  legend->Draw();
  */

  /*
  TFile* outfile = new TFile(Form("dsv_%d.root",name),"recreate");
  h_leaddoubleSV->Write(Form("leaddsv_%d",name));
  h_subldoubleSV->Write(Form("subldsv_%d",name));
  outfile->Write();
  
  h_leaddoubleSV->Draw();
  h_subldoubleSV->SetLineStyle(2);
  h_subldoubleSV->Draw("same");
  */

  /*
  std::cout << "Events before selection = " << before << std::endl;                                   
  std::cout << "Events after selection = " << after <<std::endl;
  h_eff->Draw();
  */
}
